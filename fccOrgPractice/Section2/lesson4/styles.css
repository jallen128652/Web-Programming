body {
  background: #f5f6f7;
  color: #1b1b32;
  font-family: Helvetica;
  margin: 0;
}
/* A useful property of an SVG (scalable vector graphics) is that it contains 
 a path attribute which allows the image to be scaled without affecting the resolution
 of the resultant image.
 Currently, the img is assuming its default size, which is too large. CSS has a max function
 which returns the largest of a set of comma-separated values. For example: width: max(250px, 25vw);
 In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels. 
 If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 
 25vw is equal to 25% of the viewport width.*/
#logo {
  width: max(100px, 18vw);
  background-color: #0a0a23;
  aspect-ratio: 35/4;
  padding: 0.4rem;
}
header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
}
h1 {
  color: #f1be32;
  font-size: min(5vw, 1.2em);
}
nav {
  width: 50%;
  max-width: 300px;
  height: 50px;
}
/* The child combinator selector > is used between selectors to target only elements that match the second
selector and are a direct child of the first selector. This can be helpful when you have deeply nested 
elements and want to control the scope of your styling. */
nav > ul {
  display: flex;
  justify-content: space-evenly;
}
h1,
h2 {
  font-family: Verdana, sans-serif;
}
h2 {
  border-bottom: 4px solid #dfdfe2;
}
/* This hides the text so only screen readers see it */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
/* To prevent unnecessary repetition, target the before pseudo-element of the p element, and give it a content property
 of "Question #". */
p::before {
  content: "Question #";
}
