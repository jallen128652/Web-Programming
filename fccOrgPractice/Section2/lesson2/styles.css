/* keeps everything from overflowing*/
* {
  box-sizing: border-box;
}
/* sets the size for the pics and fit */
.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  /* Notice how some of your images have become distorted. This is because the images have 
    different aspect ratios. Rather than setting each aspect ratio individually, you can use
     the object-fit property to determine how images should behave.
    cover will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit. */
  object-fit: cover;
  /* round the corners of the images */
  border-radius: 10px;
}
/* sets whole page values */
body {
  margin: 0;
  font-family: sans-serif;
  background-color: #f5f6f7;
}
/* sets header values */
.header {
  text-align: center;
  text-transform: uppercase;
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  border-bottom: 4px solid #fdb347;
}
/* creates a gallery container and sets display to flex */
.gallery {
  /* makes this a flex container */
  display: flex;
  /* sets the direction to be horizontal */
  flex-direction: row;
  /* flex the items to wrap to next row when container is too small */
  flex-wrap: wrap;
  /* justify-content property determines how the items inside a flex container
    are positioned along the main axis, affecting their position and the space around them. */
  justify-content: center;
  /* The align-items property positions the flex content along the cross axis. In this case,
     with your flex-direction set to row, your cross axis would be vertical. To vertically center
      your images, give your .gallery selector an align-items property with center as the value.*/
  align-items: center;
  /* creates space around the container */
  padding: 20px 10px;
  /* max width of container and margin 0 top/bottom auto left/right */
  max-width: 1400px;
  margin: 0 auto;
  /* The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. 
  The gap property and its row-gap and column-gap sub-properties provide this functionality for flex,
   grid, and multi-column layout. You apply the property to the container element. */
  gap: 16px;
}
/* he ::after pseudo-element creates an element that is the last child of the selected element. 
You can use it to add an empty element after the last image. If you give it the same width as the images
 it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in
 the center because you set justify-content: center on the flex container */
.gallery::after {
  /* Add a content property set to an empty string "" and 350px set for the width property. 
    This effectively moves last odd item to the left instead of center*/
  content: "";
  width: 350px;
}
